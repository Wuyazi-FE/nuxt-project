import{x as v,r as y,y as D,z as g,A as w,B as _,C as b,u as C}from"./entry.5dde0aed.js";const k=()=>null;function O(...n){var m;const i=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(i);let[a,c,e={}]=n;if(typeof a!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof c!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=e.server??!0,e.default=e.default??k,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0;const t=v(),f=()=>t.isHydrating?t.payload.data[a]:t.static.data[a],d=()=>f()!==void 0;t._asyncData[a]||(t._asyncData[a]={data:y(f()??((m=e.default)==null?void 0:m.call(e))??null),pending:y(!d()),error:y(t.payload._errors[a]?D(t.payload._errors[a]):null)});const s={...t._asyncData[a]};s.refresh=s.execute=(o={})=>{if(t._asyncDataPromises[a]){if(o.dedupe===!1)return t._asyncDataPromises[a];t._asyncDataPromises[a].cancelled=!0}if(o._initial&&d())return f();s.pending.value=!0;const l=new Promise((r,u)=>{try{r(c(t))}catch(x){u(x)}}).then(r=>{if(l.cancelled)return t._asyncDataPromises[a];e.transform&&(r=e.transform(r)),e.pick&&(r=z(r,e.pick)),s.data.value=r,s.error.value=null}).catch(r=>{var u;if(l.cancelled)return t._asyncDataPromises[a];s.error.value=r,s.data.value=C(((u=e.default)==null?void 0:u.call(e))??null)}).finally(()=>{l.cancelled||(s.pending.value=!1,t.payload.data[a]=s.data.value,s.error.value&&(t.payload._errors[a]=D(s.error.value)),delete t._asyncDataPromises[a])});return t._asyncDataPromises[a]=l,t._asyncDataPromises[a]};const p=()=>s.refresh({_initial:!0}),P=e.server!==!1&&t.payload.serverRendered;{const o=g();if(o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const r=o._nuxtOnBeforeMountCbs;o&&(w(()=>{r.forEach(u=>{u()}),r.splice(0,r.length)}),_(()=>r.splice(0,r.length)))}P&&t.isHydrating&&d()?s.pending.value=!1:o&&(t.payload.serverRendered&&t.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(p):e.immediate&&p(),e.watch&&b(e.watch,()=>s.refresh());const l=t.hook("app:data:refresh",r=>{if(!r||r.includes(a))return s.refresh()});o&&_(l)}const h=Promise.resolve(t._asyncDataPromises[a]).then(()=>s);return Object.assign(h,s),h}function B(...n){const i=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(i);const[a,c,e]=n;return O(a,c,{...e,lazy:!0},null)}async function M(n){const i=n?Array.isArray(n)?n:[n]:void 0;await v().hooks.callHookParallel("app:data:refresh",i)}function z(n,i){const a={};for(const c of i)a[c]=n[c];return a}export{O as a,M as r,B as u};
